// RUN: %swift -I %S/.. %s -i | FileCheck %s

import swift
import complex

func printDensity(d : Int) {
  if (d > 40) {
     print(" ")
  } else if d > 6 {
     print(".")
  } else if d > 4 {
     print("+")
  } else if d > 2 {
     print("*")
  } else {
     print("#")
  }
}

func getMandelbrotIterations(c:Complex, maxIterations:Int) -> Int {
  var n : Int
  var z : Complex 
  while (n < maxIterations && z.magnitude() < 4.0) {
    z = z*z + c
    ;++n
  }
  return n
}

func mandelbrot(xMin:Double, xMax:Double,
                yMin:Double, yMax:Double,
                rows:Int, cols:Int)  {
  // Set the spacing for the points in the Mandelbrot set.
  var dX = (xMax - xMin) / Double(rows)
  var dY = (yMax - yMin) / Double(cols)
  // Iterate over the points an determine if they are in the
  // Mandelbrot set.
  foreach row in (xMin..xMax).by(dX) {
    foreach col in (yMin..yMax).by(dY) {
      var c = Complex(col, row)
      printDensity(getMandelbrotIterations(c, 200))
    }
    print("\n")
  }
}

func mandelbrotArray(xMin:Double, xMax:Double,
                     yMin:Double, yMax:Double,
                     rows:Int, cols:Int) -> Int[][] {
  var result = new Int[rows][]
  foreach row in 0..rows {
    result[row] = new Int[cols]
  }
  // Set the spacing for the points in the Mandelbrot set.
  var dX = (xMax - xMin) / Double(rows)
  var dY = (yMax - yMin) / Double(cols)
  // Iterate over the points an determine if they are in the
  // Mandelbrot set.
  foreach row in 0 .. rows {
    foreach col in 0 .. cols {
      var c = Complex(Double(col)*dY+yMin, Double(row)*dX+xMin)
      // FIXME: Workaround for rdar://11327139
      var tmp = result[row]
      tmp[col] = getMandelbrotIterations(c, 200)
    }
  }
  return result
}

func showArrayDensity(a : Int[][]) {
  foreach row in a {
    foreach pixel in row {
      printDensity(pixel)
    }
    print("\n")
  }
}

//mandelbrot(-1.35, 1.4, -2.0, 1.05, 40, 80)

showArrayDensity(mandelbrotArray(-1.35, 1.4, -2.0, 1.05, 40, 80))


// CHECK: ################################################################################
// CHECK: ##############################********************##############################
// CHECK: ########################********************************########################
// CHECK: ####################***************************+++**********####################
// CHECK: #################****************************++...+++**********#################
// CHECK: ##############*****************************++++......+************##############
// CHECK: ############******************************++++.......+++************############
// CHECK: ##########******************************+++++....  ...++++************##########
// CHECK: ########******************************+++++....      ..++++++**********#########
// CHECK: #######****************************+++++.......     .....++++++**********#######
// CHECK: ######*************************+++++....... . ..   ............++*********######
// CHECK: #####*********************+++++++++...   ..             . ... ..++*********#####
// CHECK: ####******************++++++++++++.....                       ..++**********####
// CHECK: ###***************++++++++++++++... .                        ...+++**********###
// CHECK: ##**************+++.................                          ....+***********##
// CHECK: ##***********+++++.................                             .++***********##
// CHECK: #**********++++++.....       .....                             ..++***********##
// CHECK: #*********++++++......          .                              ..++************#
// CHECK: #*******+++++.......                                          ..+++************#
// CHECK: #++++............                                            ...+++************#
// CHECK: #++++............                                            ...+++************#
// CHECK: #******+++++........                                          ..+++************#
// CHECK: #********++++++.....            .                              ..++************#
// CHECK: #**********++++++.....        ....                              .++************#
// CHECK: #************+++++.................                            ..++***********##
// CHECK: ##*************++++.................                          . ..+***********##
// CHECK: ###***************+.+++++++++++.....                         ....++**********###
// CHECK: ###******************+++++++++++++.....                      ...+++*********####
// CHECK: ####*********************++++++++++....                   ..  ..++*********#####
// CHECK: #####*************************+++++........ . .        . .......+*********######
// CHECK: #######***************************+++..........     .....+++++++*********#######
// CHECK: ########*****************************++++++....      ...++++++**********########
// CHECK: ##########*****************************+++++.....  ....++++***********##########
// CHECK: ###########******************************+++++........+++***********############
// CHECK: #############******************************++++.. ...++***********##############
// CHECK: ################****************************+++...+++***********################
// CHECK: ###################***************************+.+++**********###################
// CHECK: #######################**********************************#######################
// CHECK: ############################************************############################
// CHECK: ################################################################################
